// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgenciaViagem.Migrations
{
    [DbContext(typeof(AgenciaViagemContext))]
    [Migration("20250620035431_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("AgenciaViagem.Models.CidadeDestino", b =>
                {
                    b.Property<int>("CidadeDestinoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescricaoTuristica")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("PaisDestinoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StatusAtivo")
                        .HasColumnType("INTEGER");

                    b.HasKey("CidadeDestinoId");

                    b.HasIndex("PaisDestinoId");

                    b.ToTable("CidadesDestinos");
                });

            modelBuilder.Entity("AgenciaViagem.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("TEXT");

                    b.Property<string>("EnderecoEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroTelefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("StatusAtivo")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("AgenciaViagem.Models.PacoteTuristico", b =>
                {
                    b.Property<int>("PacoteTuristicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CapacidadeMaximaViajantes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataPartida")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataRetorno")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescricaoCompleta")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroDiarias")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("StatusAtivo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TituloPacote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorPorPessoa")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PacoteTuristicoId");

                    b.ToTable("PacotesTuristicos");
                });

            modelBuilder.Entity("AgenciaViagem.Models.PaisDestino", b =>
                {
                    b.Property<int>("PaisDestinoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoPais")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("ContinenteLocalizacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataExclusao")
                        .HasColumnType("TEXT");

                    b.Property<string>("NomePais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("StatusAtivo")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaisDestinoId");

                    b.ToTable("PaisesDestinos");
                });

            modelBuilder.Entity("AgenciaViagem.Models.Reserva", b =>
                {
                    b.Property<int>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataCancelamento")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataHoraReserva")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DescontoAplicado")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("NumeroPassageiros")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObservacoesAdicionais")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacoteTuristicoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusReserva")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorTotalReserva")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ReservaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("PacoteTuristicoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("CidadeDestinoPacoteTuristico", b =>
                {
                    b.Property<int>("DestinosIncluidosCidadeDestinoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PacotesIncluidosPacoteTuristicoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DestinosIncluidosCidadeDestinoId", "PacotesIncluidosPacoteTuristicoId");

                    b.HasIndex("PacotesIncluidosPacoteTuristicoId");

                    b.ToTable("CidadeDestinoPacoteTuristico");
                });

            modelBuilder.Entity("AgenciaViagem.Models.CidadeDestino", b =>
                {
                    b.HasOne("AgenciaViagem.Models.PaisDestino", "PaisLocalizacao")
                        .WithMany("CidadesDisponiveis")
                        .HasForeignKey("PaisDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaisLocalizacao");
                });

            modelBuilder.Entity("AgenciaViagem.Models.Reserva", b =>
                {
                    b.HasOne("AgenciaViagem.Models.Cliente", "ClienteReservante")
                        .WithMany("ReservasRealizadas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgenciaViagem.Models.PacoteTuristico", "PacoteEscolhido")
                        .WithMany("ReservasEfetuadas")
                        .HasForeignKey("PacoteTuristicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClienteReservante");

                    b.Navigation("PacoteEscolhido");
                });

            modelBuilder.Entity("CidadeDestinoPacoteTuristico", b =>
                {
                    b.HasOne("AgenciaViagem.Models.CidadeDestino", null)
                        .WithMany()
                        .HasForeignKey("DestinosIncluidosCidadeDestinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgenciaViagem.Models.PacoteTuristico", null)
                        .WithMany()
                        .HasForeignKey("PacotesIncluidosPacoteTuristicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgenciaViagem.Models.Cliente", b =>
                {
                    b.Navigation("ReservasRealizadas");
                });

            modelBuilder.Entity("AgenciaViagem.Models.PacoteTuristico", b =>
                {
                    b.Navigation("ReservasEfetuadas");
                });

            modelBuilder.Entity("AgenciaViagem.Models.PaisDestino", b =>
                {
                    b.Navigation("CidadesDisponiveis");
                });
#pragma warning restore 612, 618
        }
    }
}
